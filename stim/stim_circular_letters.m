function stim_circular_letters(optstr,w,objID,arg)
%function stim_circulargrid(optstr,w,objID,arg)
%
% showex helper function for 'circulargrid' stim class
%
% Each helper function has to have the ability to do 3 things:
% (1) parse the input arguments from the 'set' command and precompute
% anything that is necessary for that stimulus
% (2) issue the display commands for that object
% (3) clean up after that object is displayed (not always necessary)

global objects sv;


CHECKS_DIM = 25;
DESIRED_SUM_DARK_PX = 12; % This will also determine the monimal number pf
%pixiel that are dark

if strcmp(optstr,'setup')
    a = sscanf(arg,'%i %i %i %i %f %i %i %i %i');
    % arguments: (1) FrameCount
    %            (2) screenYpix
    %            (3) rcircles
    %            (4) tcircles
    %            (5) alpha (0-255)
    %            (6) stimX
    %            (7) stimY
    %            (8) color option: 0 for black and white only; 1 for random
    %            color
    %            (9) cue type (1,2,3 => S, M, L)
    %            BG Colors (rgb values for bottom 3 values)
    %            (10) Bg color R
    %            (11) BG Color G
    %            (12) BG Color B
    [xCenter, yCenter] = RectCenter(sv.screenRect);
    screenNumber = max(Screen('Screens'));
    white = WhiteIndex(screenNumber);
    grey = white / 2;
    stimname = mfilename;
    screenYpix = a(2);
    rcycles = a(3);
    tcycles = a(4);
    stimX = a(6);
    stimY = -a(7);
    xylim = 5;
    cuetype = a(9);
    if numel(a) < 10
        stimBGColor = white;
    else
        stimBGColor = [a(10) a(11) a(12)];
    end
    if(cuetype == 1) % S
        checks = [...
            0,1,1,1,1;...
            0,1,0,0,0;...
            0,1,1,1,0;...
            0,0,0,1,0;...
            1,1,1,1,0];
        
    elseif(cuetype == 2) % M
        checks = [...
            1,0,0,0,1;...
            1,1,0,1,1;...
            1,0,1,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1];
        
    elseif(cuetype == 3) % L
        checks = [...
            1,0,0,0,0;...
            1,0,0,0,0;...
            1,0,0,0,0;...
            1,1,1,1,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 4) % J
        checks = [...
            1,1,1,1,1;...
            0,0,1,0,0;...
            0,0,1,0,0;...
            1,1,1,0,0;...
            1,1,1,0,0];
        
    elseif(cuetype == 5) % P
        checks = [...
            0,1,1,1,1;...
            0,1,0,0,1;...
            0,1,1,1,1;...
            0,1,0,0,0;...
            0,1,0,0,0];
        
    elseif(cuetype == 6) % O       
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 7) % X
        checks = [...
            1,1,0,0,1;...
            0,1,1,1,0;...
            0,0,1,1,0;...
            0,1,0,1,1;...
            1,0,0,0,1];
        
    elseif(cuetype == 8) % A
        checks = [...
            0,0,1,0,0;...
            0,1,0,1,0;...
            1,0,0,0,1;...
            1,1,1,1,1;...
            1,0,0,0,1];
        
    elseif(cuetype == 9) % B
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,1;...
            1,1,1,1,1;...
            1,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 10) % C
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,0;...
            1,0,1,1,0;...
            1,0,0,0,0;...
            1,1,1,1,1];
        
    elseif(cuetype == 11) % E
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,0;...
            1,1,1,1,1;...
            1,0,0,0,0;...
            1,1,1,1,1];
        
    elseif(cuetype == 12) % F
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,0;...
            1,1,1,1,1;...
            1,0,0,0,0;...
            1,0,0,0,0];
        
    elseif(cuetype == 13) % G
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,0;...
            1,0,1,1,1;...
            1,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 14) % H
        checks = [...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,1,1,1,1;...
            1,0,0,0,1;...
            1,0,0,0,1];
        
    elseif(cuetype == 15) % K
        checks = [...
            1,0,0,1,1;...
            1,0,1,0,0;...
            1,1,1,0,0;...
            1,0,1,0,0;...
            1,0,0,1,1];
        
    elseif(cuetype == 16) % U
        checks = [...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 17) % V
        
        checks = [...
            1,1,0,1,1;...
            1,1,0,1,1;...
            0,1,0,1,0;...
            0,1,0,1,0;...
            0,0,1,0,0];
        
    elseif(cuetype == 18) % Y
        
        checks = [...
            1,1,0,1,1;...
            0,1,0,1,0,;...
            0,1,1,1,0;...
            0,0,1,0,0;...
            0,1,1,1,0];
        
    elseif(cuetype ==19) % Bet
        
        checks = [...
            1,1,1,1,0;...
            0,0,0,1,0;...
            0,0,0,1,0;...
            0,0,0,1,0;...
            1,1,1,1,1];
        
    elseif(cuetype == 20) % Gimel
        
        checks = [...
            1,1,1,1,0;...
            0,0,0,1,0;...
            1,1,1,1,0;...
            1,0,0,1,0;...
            1,0,0,1,0];
        
    elseif(cuetype == 21) % Hey
        
        checks = [...
            1,1,1,1,1;...
            0,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1];
        
    elseif(cuetype == 22) % Het
        
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1;...
            1,0,0,0,1];
        
    elseif(cuetype == 23) % Tet
        
        checks = [...
            1,0,0,0,1;...
            1,0,0,1,1;...
            1,0,1,0,1;...
            1,0,0,0,1;...
            1,1,1,1,1];

    elseif(cuetype == 24) % Kaf
        
        checks = [...
            1,1,1,1,1;...
            0,0,0,0,1;...
            0,0,0,0,1;...
            0,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 25) % Lamed
        
        checks = [...
            1,0,0,0,0;...
            1,1,1,1,1;...
            0,0,0,1,1;...
            0,0,1,1,0;...
            0,1,1,0,0];
                
    elseif(cuetype == 26) % Mem
        
        checks = [...
            1,0,0,0,0;...
            1,0,1,1,1;...
            1,1,0,0,1;...
            1,0,0,0,1;...
            1,0,1,1,1];
        
    elseif(cuetype == 27) % Ain
        
        checks = [...
            0,1,0,0,1;...
            0,1,0,0,1;...
            0,1,0,0,1;...
            0,1,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 28) % Tsadi
        
        checks = [...
            1,0,0,0,1;...
            1,1,1,0,1;...
            0,0,0,1,1;...
            0,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 29) % Pei
        
        checks = [...
            1,1,1,1,1;...
            1,0,0,0,1;...
            1,1,1,0,1;...
            0,0,0,0,1;...
            1,1,1,1,1];
        
    elseif(cuetype == 30) % Shin
        
        checks = [...
            1,0,0,0,1;...
            1,0,1,0,1;...
            1,0,1,0,1;...
            1,0,1,0,1;...
            1,1,1,1,1];

    elseif(cuetype == 31) % Taff
        
        checks = [...
            0,1,1,1,1;...
            0,1,0,0,1;...
            0,1,0,0,1;...
            0,1,0,0,1;...
            1,1,0,0,1];
        
        
        
        
        
        
    end
    
    
    
    % normalize lumm
    norm_factor = (1/mean(checks,'all'))*(DESIRED_SUM_DARK_PX/CHECKS_DIM);
    checks = checks*norm_factor;
    
    assert(all(checks(:)<=1))
    assert(all(checks(:)>=0))
    
    checks = 1-checks;
    checks = checks.*255;
    
    ctrans=255*ones(size(checks));
    ctrans(checks~=grey)=a(5);
    
    %black-white
    color_checks = cat(3,checks,checks,checks);
      
    
    for n = 1:size(checks,1)
        for m = 1:size(checks,2)
            if checks(n,m)==grey
                color_checks(n,m,1:3) = sv.bgColor;
            end
        end
    end
    color_checks = cat(3,color_checks,ctrans);
    
    
    baseRect = [0 0 screenYpix*sqrt(2) screenYpix*sqrt(2)]; % length of the rectangle = sqrt(2)*radius of circle
    dstRects(:, 1) = CenterRectOnPointd(baseRect, xCenter +stimX,yCenter+stimY);
    % Create a separate oval rectangle that's larger than the rectangle for
    % the grid
    baseOvalRect = [0, 0, screenYpix*2, screenYpix*2]; % 2*radius of  circle
    ovalRects(:,1) = CenterRectOnPointd(baseOvalRect, xCenter+stimX,yCenter+stimY);
    
    % text is black and background is white
    objects{objID} = struct('type',stimname(6:end),'frame',0,'fc',a(1), 'col', stimBGColor, 'checks',color_checks,'position',dstRects, 'ovalPosition', ovalRects);

    Screen('BlendFunction', w, 'GL_SRC_ALPHA', 'GL_ONE_MINUS_SRC_ALPHA');
    radialCheckerboardTexture  = Screen('MakeTexture', w, objects{objID}.checks);
    objects{objID}.radialCheckerboardTexture = radialCheckerboardTexture;
    
elseif strcmp(optstr,'display')
    Screen('FillOval', w, objects{objID}.col, objects{objID}.ovalPosition);
    Screen('DrawTexture', w, objects{objID}.radialCheckerboardTexture,[],objects{objID}.position);
elseif strcmp(optstr,'cleanup')
    Screen('Close',objects{objID}.radialCheckerboardTexture);
else
    error('Invalid option string passed into stim_*.m function');
end